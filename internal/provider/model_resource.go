// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hightouch/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hightouch/internal/sdk/pkg/models/operations"
	"hightouch/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ModelResource{}
var _ resource.ResourceWithImportState = &ModelResource{}

func NewModelResource() resource.Resource {
	return &ModelResource{}
}

// ModelResource defines the resource implementation.
type ModelResource struct {
	client *sdk.Hightouch
}

// ModelResourceModel describes the resource data model.
type ModelResourceModel struct {
	CreatedAt   types.String            `tfsdk:"created_at"`
	Custom      *ModelCreateCustom      `tfsdk:"custom"`
	Dbt         *ModelCreateDbt         `tfsdk:"dbt"`
	Details     map[string]types.String `tfsdk:"details"`
	ID          types.String            `tfsdk:"id"`
	IsSchema    types.Bool              `tfsdk:"is_schema"`
	Message     types.String            `tfsdk:"message"`
	Name        types.String            `tfsdk:"name"`
	PrimaryKey  types.String            `tfsdk:"primary_key"`
	QueryType   types.String            `tfsdk:"query_type"`
	Raw         *ModelCreateRaw         `tfsdk:"raw"`
	Slug        types.String            `tfsdk:"slug"`
	SourceID    types.String            `tfsdk:"source_id"`
	Syncs       []types.String          `tfsdk:"syncs"`
	Table       *ModelCreateTable       `tfsdk:"table"`
	Tags        map[string]types.String `tfsdk:"tags"`
	UpdatedAt   types.String            `tfsdk:"updated_at"`
	Visual      *ModelCreateVisual      `tfsdk:"visual"`
	WorkspaceID types.String            `tfsdk:"workspace_id"`
}

func (r *ModelResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_model"
}

func (r *ModelResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Model Resource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `The timestamp when model was created`,
			},
			"custom": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"query": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
						Description: `Parsed as JSON.`,
					},
				},
				Description: `Custom query for sources that doesn't support sql. For example, Airtable.`,
			},
			"dbt": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"compiled_sql": schema.StringAttribute{
						Computed:    true,
						Description: `Compiled SQL in the dbt model`,
					},
					"database": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the database containing the generated table`,
					},
					"dbt_unique_id": schema.StringAttribute{
						Computed:    true,
						Description: `Unique ID of the model assigned by dbt (usually some combination of the schema and table name)`,
					},
					"model_id": schema.StringAttribute{
						Required:    true,
						Description: `Model id that refer to a dbt model`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the table generated by the dbt model`,
					},
					"raw_sql": schema.StringAttribute{
						Computed:    true,
						Description: `Raw SQL in the dbt model`,
					},
					"schema": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the schema containing the generated table`,
					},
				},
				Description: `Query that is based on a dbt model`,
			},
			"details": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the model`,
			},
			"is_schema": schema.BoolAttribute{
				Required: true,
				MarkdownDescription: `If is_schema is true, the model is just used to build other models.` + "\n" +
					`Either as part of visual querying, or as the root of a visual query.`,
			},
			"message": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Validation failed",
					),
				},
				Description: `must be one of ["Validation failed"]`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the model`,
			},
			"primary_key": schema.StringAttribute{
				Required:    true,
				Description: `The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying)`,
			},
			"query_type": schema.StringAttribute{
				Required:    true,
				Description: `The type of the query. Available options: custom, raw_sql, tabel, dbt and visual.`,
			},
			"raw": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"sql": schema.StringAttribute{
						Required: true,
					},
				},
				Description: `Standard raw SQL query`,
			},
			"slug": schema.StringAttribute{
				Required:    true,
				Description: `The slug of the model`,
			},
			"source_id": schema.StringAttribute{
				Required:    true,
				Description: `The id of the source that model is connected to`,
			},
			"syncs": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The list of id of syncs that uses this model`,
			},
			"table": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						Required: true,
					},
				},
				Description: `Table-based query that fetches on a table instead of SQL`,
			},
			"tags": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The tags of the model`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `The timestamp when model was lastly updated`,
			},
			"visual": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"filter": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
						Description: `Parsed as JSON.`,
					},
					"parent_id": schema.StringAttribute{
						Required:    true,
						Description: `Parent id of the schema that visual query is based on`,
					},
					"primary_label": schema.StringAttribute{
						Required: true,
					},
					"secondary_label": schema.StringAttribute{
						Required: true,
					},
				},
				Description: `Visual query, used by audience`,
			},
			"workspace_id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the workspace where the model belongs to`,
			},
		},
	}
}

func (r *ModelResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Hightouch)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Hightouch, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ModelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ModelResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToCreateSDKType()
	res, err := r.client.CreateModel(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ValidateErrorJSON == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.ValidateErrorJSON)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ModelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ModelResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetModelRequest{
		ID: id,
	}
	res, err := r.client.GetModel(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Model == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Model)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ModelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ModelResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	modelUpdate := *data.ToUpdateSDKType()
	id := data.ID.ValueString()
	request := operations.UpdateModelRequest{
		ModelUpdate: modelUpdate,
		ID:          id,
	}
	res, err := r.client.UpdateModel(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ValidateErrorJSON == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.ValidateErrorJSON)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ModelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ModelResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *ModelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
