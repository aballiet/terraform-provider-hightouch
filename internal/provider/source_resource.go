// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hightouch/internal/sdk"
	"hightouch/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hightouch/internal/sdk/pkg/models/operations"
	"hightouch/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SourceResource{}
var _ resource.ResourceWithImportState = &SourceResource{}

func NewSourceResource() resource.Resource {
	return &SourceResource{}
}

// SourceResource defines the resource implementation.
type SourceResource struct {
	client *sdk.Hightouch
}

// SourceResourceModel describes the resource data model.
type SourceResourceModel struct {
	Configuration map[string]types.String `tfsdk:"configuration"`
	CreatedAt     types.String            `tfsdk:"created_at"`
	Details       map[string]types.String `tfsdk:"details"`
	ID            types.String            `tfsdk:"id"`
	Message       types.String            `tfsdk:"message"`
	Name          types.String            `tfsdk:"name"`
	Slug          types.String            `tfsdk:"slug"`
	Type          types.String            `tfsdk:"type"`
	UpdatedAt     types.String            `tfsdk:"updated_at"`
	WorkspaceID   types.String            `tfsdk:"workspace_id"`
}

func (r *SourceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source"
}

func (r *SourceResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Source Resource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.MapAttribute{
				Required:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
				MarkdownDescription: `The source's configuration. This specifies general metadata about sources, like connection details` + "\n" +
					`Hightouch will use this configuration to connect to underlying source.` + "\n" +
					`` + "\n" +
					`The schema depends on the source type.` + "\n" +
					`` + "\n" +
					`Consumers should NOT make assumptions on the contents of the` + "\n" +
					`configuration. It may change as Hightouch updates its internal code.`,
			},
			"created_at": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `The timestamp when the source was created`,
			},
			"details": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The source's id`,
			},
			"message": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Validation failed",
					),
				},
				Description: `must be one of [Validation failed]`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The source's name`,
			},
			"slug": schema.StringAttribute{
				Required:    true,
				Description: `The source's slug`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `The source's type (e.g. snowflake or postgres).`,
			},
			"updated_at": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `The timestamp when the source was last updated`,
			},
			"workspace_id": schema.StringAttribute{
				Required:    true,
				Description: `The id of the workspace that the source belongs to`,
			},
		},
	}
}

func (r *SourceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Hightouch)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Hightouch, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SourceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	configuration := make(map[string]interface{})
	// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
	name := data.Name.ValueString()
	slug := data.Slug.ValueString()
	type1 := data.Type.ValueString()
	request := shared.SourceCreate{
		Configuration: configuration,
		Name:          name,
		Slug:          slug,
		Type:          type1,
	}
	res, err := r.client.CreateSource(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ValidateErrorJSON == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.ValidateErrorJSON)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SourceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SourceResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	configuration := make(map[string]interface{})
	// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	sourceUpdate := shared.SourceUpdate{
		Configuration: configuration,
		Name:          name,
	}
	id := data.ID.ValueString()
	request := operations.UpdateSourceRequest{
		SourceUpdate: sourceUpdate,
		ID:           id,
	}
	res, err := r.client.UpdateSource(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ValidateErrorJSON == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.ValidateErrorJSON)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SourceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *SourceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource source.")
}
